class Solution(object):
    def findRedundantConnection(self, edges):
        """
        :type edges: List[List[int]]
        :rtype: List[int]
        """
        rank=[1 for _ in range(len(edges)+1)]
        par=[i for i in range(len(edges)+1)]
        
        def find(u):
            p=par[u]
            
            while par[p]!=p:
                par[p]=par[par[p]]
                p=par[p]
            return p

        def union(u,v):
            p1,p2=find(u),find(v)
            if p1==p2:
                return False
            if rank[p1]>rank[p2]:
                rank[p1]+=rank[p2]
                par[p2]=par[p1]
            else:
                rank[p2]+=rank[p1]
                par[p1]=par[p2]
            return True



        for start,end in edges:
            if not union(start,end):
                return [start,end]
