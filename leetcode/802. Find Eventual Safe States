from collections import deque,defaultdict
class Solution(object):
    def eventualSafeNodes(self, graph):
        """
        :type graph: List[List[int]]
        :rtype: List[int]
        """
        ans=[]
        newgraph=defaultdict(list)
        q=deque()
        degree=[0 for _ in range(len(graph))]
        for i in range(len(graph)):
            for j in range(len(graph[i])):
                newgraph[graph[i][j]].append(i)
                degree[i]+=1
        print(degree)
        for i in range(len(degree)):
            if degree[i]==0:
                q.append(i)
        while q:
            now=q.popleft()
            ans.append(now)
            for j in newgraph[now]:
                degree[j]-=1
                if degree[j]==0:
                    q.append(j)
        ans.sort()
        return ans
