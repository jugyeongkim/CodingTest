from heapq import heappush,heappop
from collections import defaultdict
n,m=map(int,input().split())
INF=int(1e9)
graph=defaultdict(list)
for _ in range(m):#노드, 가중치 순
    a, b, c = map(int, input().split())
    graph[a].append((b,c))
    graph[b].append((a,c))

distance=[INF for _ in range(n+1)]

heap=[]
heappush(heap,(0,1))#거리,노드 순
distance[1]=0
while heap:
    dist,now=heappop(heap)
    if dist>distance[now]:
        continue
    for i in graph[now]:
        cost=dist+i[1]
        if distance[i[0]]>cost:
            distance[i[0]]=cost
            heappush(heap,(cost,i[0]))
print(distance[n])


