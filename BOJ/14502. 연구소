from collections import deque
n,m=map(int,input().split())
arr=[]
for _ in range(n):
    arr.append(list(map(int,input().split())))
ans=-1
cnt=0
#조합찾기
#3개되면
#바이러스에서 시작하는 bfs->별도의 함수
#다른 조합으로 반복

def bfs():
    global ans
    dx=[-1,1,0,0]
    dy=[0,0,-1,1]
    arr2=[[0 for _ in range(m)]for _ in range(n)]
    for i in range(n):
        for j in range(m):
            arr2[i][j]=arr[i][j]

    visited=[[0 for _ in range(m)]for _ in range(n)]
    q=deque()
    for i in range(n):
        for j in range(m):
            if arr2[i][j]==2:
                q.append((i,j))
    while q:
        x,y=q.popleft()
        visited[x][y]=1
        for i in range(4):
            nx=x+dx[i]
            ny=y+dy[i]
            if nx<0 or ny<0 or nx>=n or ny>=m:
                continue
            if visited[nx][ny]==0 and arr2[nx][ny]==0:
                arr2[nx][ny]=2
                q.append((nx,ny))
                visited[nx][ny]=1
    cnt=0
    for i in range(n):
        for j in range(m):
            if arr2[i][j]==0:
                cnt+=1
    ans=max(ans,cnt)



def wallcomb(cnt):
    if cnt==3:
        bfs()
        return
    for i in range(n):
        for j in range(m):
            if arr[i][j]==0:
                arr[i][j]=1
                cnt+=1
                wallcomb(cnt)

                arr[i][j]=0
                cnt-=1
wallcomb(0)
print(ans)
